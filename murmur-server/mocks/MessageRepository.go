// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	model "murmur-server/model"

	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: params
func (_m *MessageRepository) CreateMessage(params *model.Message) (*model.Message, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 *model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Message) (*model.Message, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*model.Message) *model.Message); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Message) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessage provides a mock function with given fields: message
func (_m *MessageRepository) DeleteMessage(message *model.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: messageId
func (_m *MessageRepository) GetById(messageId string) (*model.Message, error) {
	ret := _m.Called(messageId)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *model.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Message, error)); ok {
		return rf(messageId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Message); ok {
		r0 = rf(messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: userId, channel, cursor
func (_m *MessageRepository) GetMessages(userId string, channel *model.Channel, cursor string) (*[]model.MessageResponse, error) {
	ret := _m.Called(userId, channel, cursor)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 *[]model.MessageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Channel, string) (*[]model.MessageResponse, error)); ok {
		return rf(userId, channel, cursor)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Channel, string) *[]model.MessageResponse); ok {
		r0 = rf(userId, channel, cursor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]model.MessageResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Channel, string) error); ok {
		r1 = rf(userId, channel, cursor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMessage provides a mock function with given fields: message
func (_m *MessageRepository) UpdateMessage(message *model.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageRepository creates a new instance of MessageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageRepository {
	mock := &MessageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
